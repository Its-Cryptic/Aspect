buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradleVersion}", changing: false
        classpath "org.spongepowered:mixingradle:${mixingradleVersion}"
        classpath "org.parchmentmc:librarian:${librarianVersion}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = '1.19.2-1.0.0'
group = 'dev.cryptic.aspect' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'aspect'

configurations {
    library
    shade // <- Create a 'shade' configuration
    implementation.extendsFrom(shade) // <- Add the shade configuration to implementation
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aspect'

            mods {
                aspect {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aspect'

            mods {
                aspect {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aspect'

            mods {
                aspect {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'aspect', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                aspect {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        name 'Curios maven'
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        name 'JEI maven'
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CTM Maven"
        url = "https://maven.tterrag.com/"
    }
    maven { url = 'https://maven.blamejared.com/' }
    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }

    flatDir {
        dirs 'libs'
    }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.19'

    // Use this to make sure it functions in the intellij environment
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
    }

    // JEI Dependency
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-common-api:${jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-forge-api:${jeiVersion}")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.2-forge:${jeiVersion}")

    // Curios Dependency
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-${curiosVersion}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-${curiosVersion}")

    // Lodestone Dependency
    implementation fg.deobf("team.lodestar.lodestone:lodestone:${minecraftVersion}-${lodestoneVersion}")

    // GeckoLib Dependency
    shade fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:${geckoVersion}")

    // Patchouli Dependency
    //implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouliVersion}")

    // KubeJS Dependency
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejsVersion}")

    // these two are unfortunately needed since fg.deobf doesn't respect transitive dependencies yet
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhinoVersion}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architecturyVersion}")

    runtimeOnly fg.deobf("curse.maven:probejs-585406:4744799")
    runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:4661834")

    //implementation files('libs/encryptedapi-1.19.2-0.0.3.jar')
    //implementation 'dev.cryptic.encryptedapi:encryptedapi-1.19.2-0.0.3'
    implementation fg.deobf("curse.maven:encrypted-api-980064:5146363")

    //implementation "maven.modrinth:architectury-api:6.6.92+forge"
    //implementation "maven.modrinth:encrypted-api:1.19.2-0.0.2"

    implementation 'org.spongepowered:mixin:0.8.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    mixin {
        add sourceSets.main, 'aspectMixins.json'
        config 'aspectMixins.json'
        debug.verbose = true
        debug.export = true
    }

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "aspect",
                "Specification-Vendor"    : "Its Cryptic",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Its Cryptic",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication)  {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task processAspectMixins(type: Copy) {
    from 'src/main/resources'
    include 'aspectMixins.json'
    into 'build/resources/main'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}