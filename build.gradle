buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

version = "${minecraftVersion}-${modVersion}"
group = "dev.cryptic.${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = "${mod_id}"
}

configurations {
    library
    shade // <- Create a 'shade' configuration
    implementation.extendsFrom(shade) // <- Add the shade configuration to implementation
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: minecraftVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        name = "Curios maven"
        url "https://maven.theillusivec4.top"
        content {
            includeGroupByRegex "top\\.theillusivec4.*"
        }
    }

    maven {
        name 'JEI maven'
        url = "https://dvs1.progwml6.com/files/maven"
    }

    maven {
        name = "CTM Maven"
        url = "https://maven.tterrag.com/"
    }

    maven { url = 'https://maven.blamejared.com/' }

    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }

    flatDir {
        dirs 'libs'
    }

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    // Use this to make sure it functions in the intellij environment
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
    }

    // JEI Dependency
    compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jeiVersion}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jeiVersion}")

    // Curios Dependency
    //compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}:api"))
    //runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}"))
    //if(project.hasProperty('curiosVersion'))        implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}")
    //implementation "maven.modrinth:curios:${curiosVersion}"

    // Lodestone Dependency
    implementation fg.deobf("team.lodestar.lodestone:lodestone:${minecraftVersion}-${lodestoneVersion}")

    // GeckoLib Dependency
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraftVersion}:${geckoVersion}")

    // Patchouli Dependency
    //implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouliVersion}")

    // KubeJS Dependency
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejsVersion}")

    // these two are unfortunately needed since fg.deobf doesn't respect transitive dependencies yet
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhinoVersion}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architecturyVersion}")

    //runtimeOnly fg.deobf("curse.maven:probejs-585406:4744799")
    //runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:4661834")

    //implementation files('libs/encryptedapi-1.20.1-0.0.3.jar')
    //implementation 'dev.cryptic.encryptedapi:encryptedapi-1.20.1-0.0.3'
    implementation fg.deobf("curse.maven:encrypted-api-980064:5147973")

    //implementation "maven.modrinth:architectury-api:6.6.92+forge"
    //implementation "maven.modrinth:encrypted-api:1.20.1-0.0.2"

    implementation 'org.spongepowered:mixin:0.8.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    mixin {
        add sourceSets.main, 'aspectMixins.json'
        config 'aspectMixins.json'
        debug.verbose = true
        debug.export = true
    }

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraftVersion, minecraft_version_range: minecraftVersionRange,
            forge_version: forgeVersion, forge_version_range: forgeVersionRange,
            loader_version_range: loaderVersionRange,
            mod_id: mod_id, mod_name: modName, mod_license: mod_license, mod_version: modVersion,
            mod_authors: mod_author, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "${mod_author}",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "${mod_author}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task processAspectMixins(type: Copy) {
    from 'src/main/resources'
    include 'aspectMixins.json'
    into 'build/resources/main'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}